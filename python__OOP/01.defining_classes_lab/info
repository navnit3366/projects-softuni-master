Какво са класовете:
Класовете са механизъм, по който да групираме функционалност.
Класовете създават обекти, класовете са като шаблон, като фабрика за обекти.
Един клас може да произведе множество на брой инстанции на обекти.
Ако си го представим, като приект за къща, класът е проектът, а инстанцията е
завършената къща.
От един проект можем да построим многжество на брой едентични къщи, или такива,
които малко се променят, нещата, които изменяме се наричат атрибути. Атрибути, цвят
на къщата, цена и т.н. Атрибути, които можем да запазваме към инстанциите.
Атрибутите ни помагат да поддържаме състоянието на нашите инстанции. Състояние,
визираме качества, които може да има един обект (име, години, цвят).
Това е част от състоянието на един обект. Състоянието може да бъде променяемо или
непроменяемо (mutable and immutable).
Инстанциите на нашите класове могат да имат методи. Методите, това са функции,
те получават инстанцията на нашият обект, като първия арумент е self.

class Person:   има на класа
    def __init__(self, name, age)    метод на класа / контруктур
        self.name = name    атрибути на инстанцията
        self.age = age


Protected attribute:
_a
атибут,който искаме да бъде използвам, САМО от класа в който е или
от класовете, които го наследяват. Не трябва да бъде показвано публично
__а
още по-защитен атрубут.
достъпно е САМО в класа, в който се намира


Python Console:
s = 'test'
dir(s)
- показва ни всички атрибути, които са достъпни в нашата инстанция

Python пази атрибутите си в речник.

__str__ : генерира изход за  потребителя
__repr__ : генерира изход за developer-a


В Python не е добра идея да се ползва рекурсия, бавна е.
Рекурсивните решения са по-красиви, използват се само за малки задачи.


Какво е Namespace (пространство от имена)?
- мапинг, тип насочване както се прави в речниците, от име към обект.
Представяме си всеки Namespace, като речник, в който добавяме имена и обекти.
Има три вида namespace:
 - вградени
    - абс ()  вградена фунцкия, която дава абсолютната стойност
- глобавлни
- локални
    промените, които са вътре във функцията



dog = None
def cat():
    global dog
    dog = 10

dog = 10
когато използваме global, то информацията под него става
глобална, може да се използва извън функцията.
nonlocal се използва във функция, която е в друга функция.



def sum(a, b):
    a = 42
    b = 43
    return a + b


closure - наричаме функция, която е вложена, в обхваната на друга функция!

Когато конструираме даден клас, той връща обект. Обекта е крайното нещо,
върху което работим.



add = lambda a: lambda b: a + b
print(add(9)(99))
# 108


